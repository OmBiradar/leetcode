#include <bits/stdc++.h>
using namespace std;
#define ll long long

class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        vector<bool> vis(n, false);
        vector<vector<int>> components;
        function<void(int, vector<int>&)> dfs = [&](int node, vector<int>& nodes) {
            nodes.push_back(node);
            vis[node] = true;
            for (int i = 0; i < n; i++) {
                if (graph[node][i] && !vis[i]) {
                    dfs(i, nodes);
                }
            }
        };
        for (int i = 0; i < n; i++) {
            if (!vis[i])  {
                vector<int> nodes;
                dfs(i, nodes);
                components.push_back(nodes);
            }
        }
        for (auto c : components) {
            for (auto e : c)
                cout << e << ' ';
            cout << endl;
        }
        vector<int> cmp_idx(n);
        for (int i = 0; i < components.size(); i++) {
            for (int j = 0; j < components[i].size(); j++) {
                cmp_idx[components[i][j]] = i;
            }
        }
        for (auto e : cmp_idx)
            cout << e << ' ';
        cout << endl;
        sort(initial.begin(), initial.end());
        vector<int> infected_cnt(components.size(), 0);
        for (int node : initial)
            infected_cnt[cmp_idx[node]]++;
        for (auto e : infected_cnt)
            cout << e << ' ';
        cout << endl;
        int mx = -1, ans = initial[0];
        for (auto node : initial) {
            int CMP_IDX = cmp_idx[node];
            cout << "CMP IDX = " << CMP_IDX << endl;
            if (infected_cnt[CMP_IDX] == 1) {
                int cur_size = components[CMP_IDX].size();
                cout << "component size = " << components[CMP_IDX].size() << endl;
                if (cur_size > mx) {
                    cout << "updating mx " << mx << " to " << components[CMP_IDX].size() << endl; 
                    mx = cur_size;
                    ans = node;
                }
            }
        }
        return ans;
    }
};
